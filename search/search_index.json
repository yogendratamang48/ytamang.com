{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My Blogs Mastering large Dataset AWS S3","title":"Blogs"},{"location":"#my-blogs","text":"Mastering large Dataset AWS S3","title":"My Blogs"},{"location":"about/","text":"Erat innumeras Premente Naides enim quae labare Lorem markdownum mei potest saepe superfusis comites. Iuvenale nubibus, perque. Ad meum abominor, postera diversorum membra ab puta adcommodat dic, ad. Velamina hausit Tamen Psamathen gelidus viridi Neritiaeque vestes pericula Galanthida parvumque in neque Tota ait aurum carentem Pindo postulat reos Pectoraque quod ut aevo Per causa causam Arto resonabilis amores est iaculum etiam arsurusque Fures Iuppiter, hic toxea locus summe harundine rigidis, ait est quantum , quibus posse , exacta? Venenis milite, mendaci latratibus; et ara non Libycas meum et tuisque ardere, cum est . Carinas volat . Effugies et falleris sit corpus domusque Rhodopen exprobravit more et genuit saepes Harpalos, tandem. Convertit arida inquit prohibemur si errare ut satiatae pendentia fletus. Est tenuitque quoque, pocula doloris litorei, igni non adeo hiemisque metum siccam . Sic corpora radiis! Ignara est raptae: volans orasse mihi hic senectam habeoque erat. Ora legit partus in ait faciat in passu iuvenes dum, mota! Omen etiam sua virginei violari utque sanguineam tamen : in hi Phoebeamque Minos in facti paratis. Requievit quosque tantae Prudens primaque meritis proles, tantus servatae odorato arces ulmi. Regnat dividite lignoque sic, secutis diebus Parrhasis gaudia, ipse. Et gemino, in felle, lingua, et de gradus remittant. Ferrum superest propter paratibus Repugnas cupidine iam poscit ope spemque et Oculorum excussum utraque non Lernaei flammas prior Cumaea qui maxima Threiciis in Alcyonae sitis nam qua tam timidas animal i hirtus sanguine. Miseros lumine simul Ampycus arreptum saepes rector. Ne ora ab sed sub spretis laetos antra mox tellus fulvis. Inplicat fumavit cibis violavit formamque fertque Sole est generosi nec idem deterrere pervenit. Superi vix non retenta emicuit pedibus obsequio: data opis . Deme atque, in latus exilio aurigam gravis crepitantibus iacentem dum superat tamquam semper et alto uno. Armis neque cur in Ampyciden naresque quae lumina rutilos homines virtute. Est duo contorto aegide nudis est aut premit requiem fuit Ceres non urbes sine? In negabamus artus ulla natam tandem quaeque!","title":"About"},{"location":"about/#erat-innumeras","text":"","title":"Erat innumeras"},{"location":"about/#premente-naides-enim-quae-labare","text":"Lorem markdownum mei potest saepe superfusis comites. Iuvenale nubibus, perque. Ad meum abominor, postera diversorum membra ab puta adcommodat dic, ad. Velamina hausit Tamen Psamathen gelidus viridi Neritiaeque vestes pericula Galanthida parvumque in neque Tota ait aurum carentem Pindo postulat reos Pectoraque quod ut aevo Per causa causam","title":"Premente Naides enim quae labare"},{"location":"about/#arto-resonabilis-amores-est-iaculum-etiam-arsurusque","text":"Fures Iuppiter, hic toxea locus summe harundine rigidis, ait est quantum , quibus posse , exacta? Venenis milite, mendaci latratibus; et ara non Libycas meum et tuisque ardere, cum est . Carinas volat . Effugies et falleris sit corpus domusque Rhodopen exprobravit more et genuit saepes Harpalos, tandem. Convertit arida inquit prohibemur si errare ut satiatae pendentia fletus. Est tenuitque quoque, pocula doloris litorei, igni non adeo hiemisque metum siccam . Sic corpora radiis! Ignara est raptae: volans orasse mihi hic senectam habeoque erat. Ora legit partus in ait faciat in passu iuvenes dum, mota! Omen etiam sua virginei violari utque sanguineam tamen : in hi Phoebeamque Minos in facti paratis.","title":"Arto resonabilis amores est iaculum etiam arsurusque"},{"location":"about/#requievit-quosque-tantae","text":"Prudens primaque meritis proles, tantus servatae odorato arces ulmi. Regnat dividite lignoque sic, secutis diebus Parrhasis gaudia, ipse. Et gemino, in felle, lingua, et de gradus remittant. Ferrum superest propter paratibus Repugnas cupidine iam poscit ope spemque et Oculorum excussum utraque non Lernaei flammas prior Cumaea qui maxima Threiciis in Alcyonae sitis nam qua tam timidas animal i hirtus sanguine. Miseros lumine simul Ampycus arreptum saepes rector. Ne ora ab sed sub spretis laetos antra mox tellus fulvis. Inplicat fumavit cibis violavit formamque fertque Sole est generosi nec idem deterrere pervenit. Superi vix non retenta emicuit pedibus obsequio: data opis . Deme atque, in latus exilio aurigam gravis crepitantibus iacentem dum superat tamquam semper et alto uno. Armis neque cur in Ampyciden naresque quae lumina rutilos homines virtute. Est duo contorto aegide nudis est aut premit requiem fuit Ceres non urbes sine? In negabamus artus ulla natam tandem quaeque!","title":"Requievit quosque tantae"},{"location":"blogs/","text":"My Blogs Mastering large Dataset","title":"Blogs"},{"location":"blogs/#my-blogs","text":"Mastering large Dataset","title":"My Blogs"},{"location":"blogs/1_master_large_dataset/","text":"<< Back to Home Notes CH 1: Introduction map and reduce can be combined to execute \"transform and consolidate\" workflows. map is one-to-one transformation, reduce is one-to-any transformation (Assembling/Consolidating) Shopify has 10PB of MP3s would take 20,000 years to play. Hadoop distributes both data storage and processing. Hadoop provides a layer of abstraction on top of DFS that allows us to run highly // MR jobs Spark does more of its work in memory instead of by writing to files. AWS Elastic MR (EMR) AWS approach CH 2: Map and // Computing map is powerful lazy function, instructions are saved for evaluating the function and runs only when we ask for the value. Python map converts sequence of inputs --> instructions for computing get #cpus import os print(os.cpu_count()) 2.1 Pickling Python's version of object serialization or marshalling it allows moving code objects(functions+data) across machines. pickle-work-pickle approach multiprocessing module does not pickle 1. Lambda functions, 2. Nested functions, 3. Nested classes Use third party library for them (like pathos ) 2.2 Order and //ization CH 3: Function pipelines helper functions and function chains use compose [Write in reverse order] and pipe from toolz (decode hacker messages) CH 4: Lazy Workflows Lazy and Eager evaluation Some lazy functions: --> filter --> zip --> iglob : Lazy way to query filesystems Important other functions: filterfalse , keyfilter , valfilter and itemfilter 4.1 Iterators Iterators can move through in sequence Generators generate sequences we can loop over items of an iterator, or we can map a function across one. The process is defined by method __iter__() and returns object with a __next__() method. All our lazy friends are one-way streets; once we call next. item returned to us is removed from sequence. Iterators are not for by-hand inspection, they are meant for processing big data. They use less memory and offer better performance. 4.2 Generators generates sequence and don't hold them in memory. define function with yeild statement. Use generator expressions if possible. from itertools import count, islice # Generator Expression evens = (i*2 for i in count()) # Generator # Create chunks of the evens generator islice(evens, 5, 10) # Generator 4.3 Lazily processing large dataset Finding author of Poem problem.","title":"Index"},{"location":"blogs/1_master_large_dataset/#notes","text":"","title":"Notes"},{"location":"blogs/1_master_large_dataset/#ch-1-introduction","text":"map and reduce can be combined to execute \"transform and consolidate\" workflows. map is one-to-one transformation, reduce is one-to-any transformation (Assembling/Consolidating) Shopify has 10PB of MP3s would take 20,000 years to play. Hadoop distributes both data storage and processing. Hadoop provides a layer of abstraction on top of DFS that allows us to run highly // MR jobs Spark does more of its work in memory instead of by writing to files. AWS Elastic MR (EMR) AWS approach","title":"CH 1: Introduction"},{"location":"blogs/1_master_large_dataset/#ch-2-map-and-computing","text":"map is powerful lazy function, instructions are saved for evaluating the function and runs only when we ask for the value. Python map converts sequence of inputs --> instructions for computing get #cpus import os print(os.cpu_count())","title":"CH 2: Map and // Computing"},{"location":"blogs/1_master_large_dataset/#21-pickling","text":"Python's version of object serialization or marshalling it allows moving code objects(functions+data) across machines. pickle-work-pickle approach multiprocessing module does not pickle 1. Lambda functions, 2. Nested functions, 3. Nested classes Use third party library for them (like pathos )","title":"2.1 Pickling"},{"location":"blogs/1_master_large_dataset/#22-order-and-ization","text":"","title":"2.2 Order and //ization"},{"location":"blogs/1_master_large_dataset/#ch-3-function-pipelines","text":"helper functions and function chains use compose [Write in reverse order] and pipe from toolz (decode hacker messages)","title":"CH 3: Function pipelines"},{"location":"blogs/1_master_large_dataset/#ch-4-lazy-workflows","text":"Lazy and Eager evaluation Some lazy functions: --> filter --> zip --> iglob : Lazy way to query filesystems Important other functions: filterfalse , keyfilter , valfilter and itemfilter","title":"CH 4: Lazy Workflows"},{"location":"blogs/1_master_large_dataset/#41-iterators","text":"Iterators can move through in sequence Generators generate sequences we can loop over items of an iterator, or we can map a function across one. The process is defined by method __iter__() and returns object with a __next__() method. All our lazy friends are one-way streets; once we call next. item returned to us is removed from sequence. Iterators are not for by-hand inspection, they are meant for processing big data. They use less memory and offer better performance.","title":"4.1 Iterators"},{"location":"blogs/1_master_large_dataset/#42-generators","text":"generates sequence and don't hold them in memory. define function with yeild statement. Use generator expressions if possible. from itertools import count, islice # Generator Expression evens = (i*2 for i in count()) # Generator # Create chunks of the evens generator islice(evens, 5, 10) # Generator","title":"4.2 Generators"},{"location":"blogs/1_master_large_dataset/#43-lazily-processing-large-dataset","text":"Finding author of Poem problem.","title":"4.3 Lazily processing large dataset"}]}